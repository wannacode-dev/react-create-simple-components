import './style.css';

const { useState, useEffect } = React;

// –î–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω
const COUNTRIES = [
    { id: 1, name: '–†–æ—Å—Å–∏—è', capital: '–ú–æ—Å–∫–≤–∞', population: '146 –º–ª–Ω', continent: '–ï–≤—Ä–æ–ø–∞', flag: 'üá∑üá∫' },
    { id: 2, name: '–°–®–ê', capital: '–í–∞—à–∏–Ω–≥—Ç–æ–Ω', population: '331 –º–ª–Ω', continent: '–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞', flag: 'üá∫üá∏' },
    { id: 3, name: '–ö–∏—Ç–∞–π', capital: '–ü–µ–∫–∏–Ω', population: '1.4 –º–ª—Ä–¥', continent: '–ê–∑–∏—è', flag: 'üá®üá≥' },
    { id: 4, name: '–Ø–ø–æ–Ω–∏—è', capital: '–¢–æ–∫–∏–æ', population: '126 –º–ª–Ω', continent: '–ê–∑–∏—è', flag: 'üáØüáµ' },
    { id: 5, name: '–ì–µ—Ä–º–∞–Ω–∏—è', capital: '–ë–µ—Ä–ª–∏–Ω', population: '83 –º–ª–Ω', continent: '–ï–≤—Ä–æ–ø–∞', flag: 'üá©üá™' },
    { id: 6, name: '–§—Ä–∞–Ω—Ü–∏—è', capital: '–ü–∞—Ä–∏–∂', population: '67 –º–ª–Ω', continent: '–ï–≤—Ä–æ–ø–∞', flag: 'üá´üá∑' },
    { id: 7, name: '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', capital: '–õ–æ–Ω–¥–æ–Ω', population: '67 –º–ª–Ω', continent: '–ï–≤—Ä–æ–ø–∞', flag: 'üá¨üáß' },
    { id: 8, name: '–ò—Ç–∞–ª–∏—è', capital: '–†–∏–º', population: '60 –º–ª–Ω', continent: '–ï–≤—Ä–æ–ø–∞', flag: 'üáÆüáπ' },
    { id: 9, name: '–ë—Ä–∞–∑–∏–ª–∏—è', capital: '–ë—Ä–∞–∑–∏–ª–∏–∞', population: '213 –º–ª–Ω', continent: '–Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞', flag: 'üáßüá∑' },
    { id: 10, name: '–ê–≤—Å—Ç—Ä–∞–ª–∏—è', capital: '–ö–∞–Ω–±–µ—Ä—Ä–∞', population: '26 –º–ª–Ω', continent: '–ê–≤—Å—Ç—Ä–∞–ª–∏—è', flag: 'üá¶üá∫' },
    { id: 11, name: '–ò–Ω–¥–∏—è', capital: '–ù—å—é-–î–µ–ª–∏', population: '1.4 –º–ª—Ä–¥', continent: '–ê–∑–∏—è', flag: 'üáÆüá≥' },
    { id: 12, name: '–ö–∞–Ω–∞–¥–∞', capital: '–û—Ç—Ç–∞–≤–∞', population: '38 –º–ª–Ω', continent: '–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞', flag: 'üá®üá¶' },
    { id: 13, name: '–ú–µ–∫—Å–∏–∫–∞', capital: '–ú–µ—Ö–∏–∫–æ', population: '129 –º–ª–Ω', continent: '–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞', flag: 'üá≤üáΩ' },
    { id: 14, name: '–ò—Å–ø–∞–Ω–∏—è', capital: '–ú–∞–¥—Ä–∏–¥', population: '47 –º–ª–Ω', continent: '–ï–≤—Ä–æ–ø–∞', flag: 'üá™üá∏' },
    { id: 15, name: '–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è', capital: '–°–µ—É–ª', population: '52 –º–ª–Ω', continent: '–ê–∑–∏—è', flag: 'üá∞üá∑' },
];

function SearchWithAutocomplete() {
    const [searchQuery, setSearchQuery] = useState('');
    const [suggestions, setSuggestions] = useState([]);
    const [showSuggestions, setShowSuggestions] = useState(false);
    const [filteredCountries, setFilteredCountries] = useState([]);
    const [isSearching, setIsSearching] = useState(false);
    
    // Debounce –¥–ª—è –ø–æ–∏—Å–∫–∞ - –∑–∞–¥–µ—Ä–∂–∫–∞ 300–º—Å
    useEffect(() => {
        if (searchQuery.length === 0) {
            setSuggestions([]);
            setFilteredCountries([]);
            setIsSearching(false);
            return;
        }
        
        setIsSearching(true);
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–æ–∏—Å–∫–∞ (debounce)
        const timer = setTimeout(() => {
            const query = searchQuery.toLowerCase();
            
            // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Å—Ç–æ–ª–∏—Ü–µ
            const filtered = COUNTRIES.filter(country => 
                country.name.toLowerCase().includes(query) ||
                country.capital.toLowerCase().includes(query)
            );
            
            setSuggestions(filtered.slice(0, 5)); // –ú–∞–∫—Å–∏–º—É–º 5 –ø–æ–¥—Å–∫–∞–∑–æ–∫
            setFilteredCountries(filtered);
            setIsSearching(false);
        }, 300);
        
        // Cleanup - –æ—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –Ω–æ–≤–æ–º –≤–≤–æ–¥–µ
        return () => clearTimeout(timer);
    }, [searchQuery]);
    
    const handleInputChange = (e) => {
        setSearchQuery(e.target.value);
        setShowSuggestions(true);
    };
    
    const handleSuggestionClick = (countryName) => {
        setSearchQuery(countryName);
        setShowSuggestions(false);
    };
    
    const highlightMatch = (text, query) => {
        if (!query) return text;
        
        const index = text.toLowerCase().indexOf(query.toLowerCase());
        if (index === -1) return text;
        
        return (
            <>
                {text.substring(0, index)}
                <span className="highlight">
                    {text.substring(index, index + query.length)}
                </span>
                {text.substring(index + query.length)}
            </>
        );
    };
    
    return (
        <div className="search-container">
            <h1>üåç –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω</h1>
            
            <p className="search-hint">
                –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –∏–ª–∏ —Å—Ç–æ–ª–∏—Ü—ã
            </p>
            
            {/* –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ */}
            <div className="search-box">
                <input 
                    type="text"
                    value={searchQuery}
                    onChange={handleInputChange}
                    onFocus={() => setShowSuggestions(true)}
                    placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ..."
                    className="search-input"
                />
                
                {isSearching ? (
                    <div className="loading-indicator">‚è≥</div>
                ) : (
                    <div className="search-icon">üîç</div>
                )}
                
                {/* –ê–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç */}
                {showSuggestions && suggestions.length > 0 && searchQuery.length > 0 && (
                    <div className="autocomplete-dropdown">
                        {suggestions.map(country => (
                            <div 
                                key={country.id}
                                className="autocomplete-item"
                                onClick={() => handleSuggestionClick(country.name)}
                            >
                                <span>{country.flag}</span>
                                <span>
                                    {highlightMatch(country.name, searchQuery)}
                                    {' ‚Ä¢ '}
                                    {highlightMatch(country.capital, searchQuery)}
                                </span>
                            </div>
                        ))}
                    </div>
                )}
            </div>
            
            {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
            <div className="search-results">
                {searchQuery.length === 0 ? (
                    <div className="empty-state">
                        <div className="icon">üåê</div>
                        <h3>–ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫</h3>
                        <p>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –∏–ª–∏ —Å—Ç–æ–ª–∏—Ü—ã –≤ –ø–æ–ª–µ –≤—ã—à–µ</p>
                    </div>
                ) : filteredCountries.length === 0 ? (
                    <div className="empty-state">
                        <div className="icon">üòî</div>
                        <h3>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
                        <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å</p>
                    </div>
                ) : (
                    <>
                        <div className="results-header">
                            –ù–∞–π–¥–µ–Ω–æ: <strong>{filteredCountries.length}</strong> {
                                filteredCountries.length === 1 ? '—Å—Ç—Ä–∞–Ω–∞' :
                                filteredCountries.length < 5 ? '—Å—Ç—Ä–∞–Ω—ã' : '—Å—Ç—Ä–∞–Ω'
                            }
                        </div>
                        
                        <div className="countries-list">
                            {filteredCountries.map(country => (
                                <div key={country.id} className="country-item">
                                    <div className="country-header">
                                        <div className="country-flag">{country.flag}</div>
                                        <h2 className="country-name">{country.name}</h2>
                                    </div>
                                    <div className="country-info">
                                        <div className="info-item">
                                            <span className="info-label">–°—Ç–æ–ª–∏—Ü–∞:</span>
                                            <span>{country.capital}</span>
                                        </div>
                                        <div className="info-item">
                                            <span className="info-label">–ù–∞—Å–µ–ª–µ–Ω–∏–µ:</span>
                                            <span>{country.population}</span>
                                        </div>
                                        <div className="info-item">
                                            <span className="info-label">–ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç:</span>
                                            <span>{country.continent}</span>
                                        </div>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </>
                )}
            </div>
        </div>
    );
}

function App() {
    return (
        <div className="app-container">
            <SearchWithAutocomplete />
        </div>
    );
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);

