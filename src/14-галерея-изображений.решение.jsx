import './style.css';

const { useState, useEffect } = React;

// –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const IMAGES = [
    { id: 1, url: 'public/avatars/avatar1woman.jpg', title: '–ó–∞–∫–∞—Ç –≤ –≥–æ—Ä–∞—Ö', author: '–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞' },
    { id: 2, url: 'public/avatars/avatar2men.jpg', title: '–ì–æ—Ä–æ–¥—Å–∫–æ–π –ø–µ–π–∑–∞–∂', author: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤' },
    { id: 3, url: 'public/avatars/avatar3woman.jpg', title: '–õ–µ—Å–Ω–∞—è —Ç—Ä–æ–ø–∞', author: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞' },
    { id: 4, url: 'public/avatars/avatar4men.jpg', title: '–ú–æ—Ä—Å–∫–æ–π –±–µ—Ä–µ–≥', author: '–ü—ë—Ç—Ä –°–º–∏—Ä–Ω–æ–≤' },
    { id: 5, url: 'public/avatars/laptop1.jpg', title: '–ì–æ—Ä–Ω–æ–µ –æ–∑–µ—Ä–æ', author: '–ï–ª–µ–Ω–∞ –ö–æ–∑–ª–æ–≤–∞' },
    { id: 6, url: 'public/avatars/iphone1.jpg', title: '–û—Å–µ–Ω–Ω–∏–π –ø–∞—Ä–∫', author: '–î–º–∏—Ç—Ä–∏–π –í–æ–ª–∫–æ–≤' },
    { id: 7, url: 'public/avatars/keyboard1.jpg', title: '–ù–æ—á–Ω–æ–π –≥–æ—Ä–æ–¥', author: '–û–ª—å–≥–∞ –ú–æ—Ä–æ–∑–æ–≤–∞' },
    { id: 8, url: 'public/avatars/mouse1.jpg', title: '–í–µ—Å–µ–Ω–Ω–∏–µ —Ü–≤–µ—Ç—ã', author: '–ù–∏–∫–æ–ª–∞–π –ù–æ–≤–∏–∫–æ–≤' },
    { id: 9, url: 'public/avatars/monitor1.jpg', title: '–ó–∏–º–Ω–∏–π –ª–µ—Å', author: '–¢–∞—Ç—å—è–Ω–∞ –ë–µ–ª–æ–≤–∞' },
];

function ImageGallery() {
    const [selectedImageIndex, setSelectedImageIndex] = useState(null);
    
    const openModal = (index) => {
        setSelectedImageIndex(index);
    };
    
    const closeModal = () => {
        setSelectedImageIndex(null);
    };
    
    const goToNext = () => {
        if (selectedImageIndex < IMAGES.length - 1) {
            setSelectedImageIndex(selectedImageIndex + 1);
        }
    };
    
    const goToPrev = () => {
        if (selectedImageIndex > 0) {
            setSelectedImageIndex(selectedImageIndex - 1);
        }
    };
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    useEffect(() => {
        if (selectedImageIndex === null) return;
        
        const handleKeyPress = (e) => {
            if (e.key === 'Escape') {
                closeModal();
            } else if (e.key === 'ArrowRight') {
                goToNext();
            } else if (e.key === 'ArrowLeft') {
                goToPrev();
            }
        };
        
        window.addEventListener('keydown', handleKeyPress);
        
        // Cleanup
        return () => {
            window.removeEventListener('keydown', handleKeyPress);
        };
    }, [selectedImageIndex]);
    
    const selectedImage = selectedImageIndex !== null ? IMAGES[selectedImageIndex] : null;
    
    return (
        <div className="gallery-container">
            <h1>üì∑ –§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—è</h1>
            
            {/* –°–µ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */}
            <div className="gallery-grid">
                {IMAGES.map((image, index) => (
                    <div 
                        key={image.id}
                        className="gallery-item"
                        onClick={() => openModal(index)}
                    >
                        <img src={image.url} alt={image.title} />
                        <div className="gallery-item-overlay">
                            <div className="image-title">{image.title}</div>
                            <div className="image-author">üì∏ {image.author}</div>
                        </div>
                    </div>
                ))}
            </div>
            
            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ */}
            {selectedImage && (
                <div className="modal-overlay" onClick={closeModal}>
                    <div className="modal-content" onClick={(e) => e.stopPropagation()}>
                        <button className="modal-close" onClick={closeModal}>
                            ‚úï
                        </button>
                        
                        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
                        <button 
                            className="modal-nav prev"
                            onClick={goToPrev}
                            disabled={selectedImageIndex === 0}
                        >
                            ‚Äπ
                        </button>
                        
                        <button 
                            className="modal-nav next"
                            onClick={goToNext}
                            disabled={selectedImageIndex === IMAGES.length - 1}
                        >
                            ‚Ä∫
                        </button>
                        
                        {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
                        <img 
                            src={selectedImage.url} 
                            alt={selectedImage.title}
                            className="modal-image"
                        />
                        
                        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                        <div className="modal-info">
                            <h2>{selectedImage.title}</h2>
                            <p>üì∏ –ê–≤—Ç–æ—Ä: {selectedImage.author}</p>
                        </div>
                        
                        {/* –°—á–µ—Ç—á–∏–∫ */}
                        <div className="image-counter">
                            {selectedImageIndex + 1} / {IMAGES.length}
                        </div>
                        
                        {/* –ú–∏–Ω–∏–∞—Ç—é—Ä—ã */}
                        <div className="modal-thumbnails">
                            {IMAGES.map((image, index) => (
                                <img 
                                    key={image.id}
                                    src={image.url}
                                    alt={image.title}
                                    className={`thumbnail ${index === selectedImageIndex ? 'active' : ''}`}
                                    onClick={() => setSelectedImageIndex(index)}
                                />
                            ))}
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
}

function App() {
    return (
        <div className="app-container">
            <ImageGallery />
        </div>
    );
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);

