import './style.css';

const { useState } = React;

// –ò–º–∏—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
const POSTS = Array.from({ length: 100 }, (_, i) => ({
    id: i + 1,
    title: `–ü–æ—Å—Ç –Ω–æ–º–µ—Ä ${i + 1}: –ò–∑—É—á–∞–µ–º React`,
    body: `–≠—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–∞ ${i + 1}. React - –æ—Ç–ª–∏—á–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤. –í —ç—Ç–æ–º –ø–æ—Å—Ç–µ –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã —Ä–∞–±–æ—Ç—ã —Å React –∏ —É–∑–Ω–∞–µ–º –º–Ω–æ–≥–æ –Ω–æ–≤–æ–≥–æ!`,
    date: new Date(2024, 0, 1 + i).toLocaleDateString('ru-RU')
}));

function Pagination() {
    const [currentPage, setCurrentPage] = useState(1);
    const [postsPerPage, setPostsPerPage] = useState(10);
    
    // –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const indexOfLastPost = currentPage * postsPerPage;
    const indexOfFirstPost = indexOfLastPost - postsPerPage;
    const currentPosts = POSTS.slice(indexOfFirstPost, indexOfLastPost);
    
    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    const totalPages = Math.ceil(POSTS.length / postsPerPage);
    
    // –§—É–Ω–∫—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const goToPage = (page) => {
        setCurrentPage(page);
    };
    
    const goToNextPage = () => {
        if (currentPage < totalPages) {
            setCurrentPage(currentPage + 1);
        }
    };
    
    const goToPrevPage = () => {
        if (currentPage > 1) {
            setCurrentPage(currentPage - 1);
        }
    };
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const getPageNumbers = () => {
        const pages = [];
        const maxVisible = 5;
        
        if (totalPages <= maxVisible) {
            for (let i = 1; i <= totalPages; i++) {
                pages.push(i);
            }
        } else {
            if (currentPage <= 3) {
                for (let i = 1; i <= 4; i++) pages.push(i);
                pages.push('...');
                pages.push(totalPages);
            } else if (currentPage >= totalPages - 2) {
                pages.push(1);
                pages.push('...');
                for (let i = totalPages - 3; i <= totalPages; i++) pages.push(i);
            } else {
                pages.push(1);
                pages.push('...');
                pages.push(currentPage - 1);
                pages.push(currentPage);
                pages.push(currentPage + 1);
                pages.push('...');
                pages.push(totalPages);
            }
        }
        
        return pages;
    };
    
    return (
        <div className="pagination-container">
            <h1>üìÑ –ü–æ—Å—Ç—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π</h1>
            
            {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */}
            <div className="settings-panel">
                <label>–ü–æ—Å—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:</label>
                <select 
                    value={postsPerPage} 
                    onChange={(e) => {
                        setPostsPerPage(Number(e.target.value));
                        setCurrentPage(1); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    }}
                >
                    <option value={5}>5</option>
                    <option value={10}>10</option>
                    <option value={20}>20</option>
                    <option value={50}>50</option>
                </select>
            </div>
            
            {/* –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ */}
            <div className="posts-list">
                {currentPosts.map(post => (
                    <div key={post.id} className="post-item">
                        <div className="post-header">
                            <span className="post-id">#{post.id}</span>
                            <span className="post-date">üìÖ {post.date}</span>
                        </div>
                        <h2 className="post-title">{post.title}</h2>
                        <p className="post-body">{post.body}</p>
                    </div>
                ))}
            </div>
            
            {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
            <div className="pagination">
                <button 
                    onClick={goToPrevPage}
                    disabled={currentPage === 1}
                    className="pagination-button"
                >
                    ‚Üê –ù–∞–∑–∞–¥
                </button>
                
                {getPageNumbers().map((page, index) => (
                    page === '...' ? (
                        <span key={`dots-${index}`} className="pagination-dots">...</span>
                    ) : (
                        <button
                            key={page}
                            onClick={() => goToPage(page)}
                            className={`page-button ${currentPage === page ? 'active' : ''}`}
                        >
                            {page}
                        </button>
                    )
                ))}
                
                <button 
                    onClick={goToNextPage}
                    disabled={currentPage === totalPages}
                    className="pagination-button"
                >
                    –í–ø–µ—Ä—ë–¥ ‚Üí
                </button>
            </div>
            
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="pagination-info">
                –°—Ç—Ä–∞–Ω–∏—Ü–∞ <strong>{currentPage}</strong> –∏–∑ <strong>{totalPages}</strong>
                {' ‚Ä¢ '}
                –ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å—Ç—ã <strong>{indexOfFirstPost + 1}</strong>-<strong>{Math.min(indexOfLastPost, POSTS.length)}</strong> –∏–∑ <strong>{POSTS.length}</strong>
            </div>
        </div>
    );
}

function App() {
    return (
        <div className="app-container">
            <Pagination />
        </div>
    );
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
