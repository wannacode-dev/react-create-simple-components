import './style.css';

const { useState, useEffect, useRef } = React;

// –ù–∞—á–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
const INITIAL_MESSAGES = [
    { id: 1, text: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?', sender: 'bot', time: '10:00' },
    { id: 2, text: '–û—Ç–ª–∏—á–Ω–æ! –ê —É —Ç–µ–±—è?', sender: 'user', time: '10:01' },
    { id: 3, text: '–¢–æ–∂–µ —Ö–æ—Ä–æ—à–æ! –ß—Ç–æ –Ω–æ–≤–æ–≥–æ?', sender: 'bot', time: '10:02' },
];

function ChatInterface() {
    const [messages, setMessages] = useState(INITIAL_MESSAGES);
    const [inputValue, setInputValue] = useState('');
    const [isTyping, setIsTyping] = useState(false);
    const messagesEndRef = useRef(null);
    
    // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    useEffect(() => {
        scrollToBottom();
    }, [messages]);
    
    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    };
    
    const sendMessage = (e) => {
        e.preventDefault();
        
        if (inputValue.trim() === '') return;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newMessage = {
            id: Date.now(),
            text: inputValue,
            sender: 'user',
            time: new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })
        };
        
        setMessages([...messages, newMessage]);
        setInputValue('');
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 1-2 —Å–µ–∫—É–Ω–¥—ã
        setIsTyping(true);
        setTimeout(() => {
            const botResponses = [
                '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ',
                '–ü–æ–Ω—è—Ç–Ω–æ, —Å–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
                '–°–æ–≥–ª–∞—Å–µ–Ω —Å —Ç–æ–±–æ–π!',
                '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ',
                '–Ø —Ç–æ–∂–µ —Ç–∞–∫ –¥—É–º–∞—é',
                '–û—Ç–ª–∏—á–Ω–∞—è –º—ã—Å–ª—å!',
                '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è',
            ];
            
            const randomResponse = botResponses[Math.floor(Math.random() * botResponses.length)];
            
            const botMessage = {
                id: Date.now() + 1,
                text: randomResponse,
                sender: 'bot',
                time: new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })
            };
            
            setMessages(prev => [...prev, botMessage]);
            setIsTyping(false);
        }, 1500);
    };
    
    return (
        <div className="chat-container">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <div className="chat-header">
                <div className="chat-avatar">ü§ñ</div>
                <div className="chat-info">
                    <h2>–ß–∞—Ç-–±–æ—Ç –ü–æ–º–æ—â–Ω–∏–∫</h2>
                    <p>–í—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏</p>
                </div>
            </div>
            
            {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
            <div className="chat-messages">
                {messages.length === 0 ? (
                    <div className="empty-chat">
                        <div className="icon">üí¨</div>
                        <p>–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ</p>
                    </div>
                ) : (
                    messages.map(message => (
                        <div 
                            key={message.id} 
                            className={`message ${message.sender === 'user' ? 'sent' : 'received'}`}
                        >
                            <div className="message-avatar">
                                {message.sender === 'user' ? 'üë§' : 'ü§ñ'}
                            </div>
                            <div className="message-content">
                                <p className="message-text">{message.text}</p>
                                <div className="message-time">{message.time}</div>
                            </div>
                        </div>
                    ))
                )}
                
                {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è */}
                {isTyping && (
                    <div className="message received">
                        <div className="message-avatar">ü§ñ</div>
                        <div className="typing-indicator">
                            <div className="typing-dots">
                                <div className="typing-dot"></div>
                                <div className="typing-dot"></div>
                                <div className="typing-dot"></div>
                            </div>
                            <span>–ø–µ—á–∞—Ç–∞–µ—Ç...</span>
                        </div>
                    </div>
                )}
                
                {/* –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∞ */}
                <div ref={messagesEndRef} />
            </div>
            
            {/* –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
            <form onSubmit={sendMessage} className="chat-input-form">
                <input 
                    type="text"
                    value={inputValue}
                    onChange={(e) => setInputValue(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                    className="chat-input"
                />
                <button 
                    type="submit"
                    disabled={inputValue.trim() === ''}
                    className="send-button"
                >
                    ‚û§
                </button>
            </form>
        </div>
    );
}

function App() {
    return (
        <div className="app-container">
            <ChatInterface />
        </div>
    );
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);

